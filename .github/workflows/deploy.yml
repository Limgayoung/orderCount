name: CD

on:
  push:
    branches: [ main ]

permissions:
  contents: read

env:
  DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
  DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
  DOCKER_REPO: ${{secrets.DOCKER_REPO}}
  APPLICATION: ${{secrets.APPLICATION}}
  
jobs:
  CD:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    ## create application.yml
    - name: Make Application.yml
      shell: bash
      run: |        
        mkdir -p ./src/main/resources
        cd ./src/main/resources
        touch ./application.yml        
        echo $APPLICATION > ./application.yml              
      
    ## gradle build
    - name: Build
      run: |
        chmod +x ./gradlew
        ./gradlew build -x test
    
    ## docker build & push
    - name: Docker build & push
      run: |        
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker build . --tag $DOCKER_USERNAME/$DOCKER_REPO:${GITHUB_SHA::7}
        docker build . --tag $DOCKER_USERNAME/$DOCKER_REPO:latest
        docker push $DOCKER_USERNAME/$DOCKER_REPO:${GITHUB_SHA::7}
        docker push $DOCKER_USERNAME/$DOCKER_REPO:latest
      
    ## EC2 connect & Docker 명령어 실행
    - name: EC2 connect & docker
      uses: appleboy/ssh-action@master
      with:        
        host: ${{ secrets.HOST }}
        username: ec2-user
        key: ${{ secrets.PRIVATE_KEYPAIR }}
        timeout: 60s
        # ssh로 실행시킨 쉘에서 환경변수 불러오지 못함.
        envs: DOCKER_USERNAME, DOCKER_PASSWORD, DOCKER_REPO, GITHUB_SHA                
        # docker      
        script: |          
          docker pull $DOCKER_USERNAME/$DOCKER_REPO:${GITHUB_SHA::7}
          docker stop $DOCKER_REPO
          docker rm $DOCKER_REPO
          docker tag $DOCKER_USERNAME/$DOCKER_REPO:${GITHUB_SHA::7} $DOCKER_USERNAME/$DOCKER_REPO
          docker run -d --name $DOCKER_REPO -p 8080:8080 $DOCKER_USERNAME/$DOCKER_REPO --restart always
          docker system prune -a -f         
